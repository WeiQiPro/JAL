["=== EXECUTION START ===","","PASS 1: Collecting function declarations...","  Found function: add","  Found function: multiply","  Found function: isEven","  Found function: fibonacci","  Found function: main","Total functions registered: 5","","PASS 2: Executing global statements...","","","PASS 3: Executing main()...","","  Enter function scope","  Enter block {","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    let x = 10","    const y = 20","    let z = 30","    const name = \"JAL\"","    let isActive = true","    let value = 3.14","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","      Binary operation: PLUS","        Left operand: 10","        Right operand: 20","      Result: 30","    let sum = 30","      Binary operation: MINUS","        Left operand: 30","        Right operand: 10","      Result: 20","    let diff = 20","      Binary operation: MULTIPLY","        Left operand: 10","        Right operand: 5","      Result: 50","    let product = 50","      Binary operation: DIVIDE","        Left operand: 30","        Right operand: 2","      Result: 15","    let quotient = 15","      Binary operation: MOD","        Left operand: 30","        Right operand: 7","      Result: 2","    let remainder = 2","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","      Binary operation: LESS_THAN","        Left operand: 10","        Right operand: 20","      Result: true","    If condition evaluated to: true","    Taking if branch","    Enter block {","      Executing expression statement","        Calling function: print()","    Exit block }","      Binary operation: EQUAL_EQUAL","        Left operand: 10","        Right operand: 10","      Result: true","    If condition evaluated to: true","    Taking if branch","    Enter block {","      Executing expression statement","        Calling function: print()","    Exit block }","      Binary operation: GREATER_THAN","        Left operand: 30","        Right operand: 10","      Result: true","    If condition evaluated to: true","    Taking if branch","    Enter block {","      Executing expression statement","        Calling function: print()","    Exit block }","      Binary operation: NOT_EQUAL","        Left operand: 20","        Right operand: 10","      Result: true","    If condition evaluated to: true","    Taking if branch","    Enter block {","      Executing expression statement","        Calling function: print()","    Exit block }","      Binary operation: LESS_EQUAL","        Left operand: 10","        Right operand: 10","      Result: true","    If condition evaluated to: true","    Taking if branch","    Enter block {","      Executing expression statement","        Calling function: print()","    Exit block }","      Binary operation: GREATER_EQUAL","        Left operand: 20","        Right operand: 20","      Result: true","    If condition evaluated to: true","    Taking if branch","    Enter block {","      Executing expression statement","        Calling function: print()","    Exit block }","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","      Calling function: add()","        Evaluating arguments:","          Arg 0: 5","          Arg 1: 7","        Enter function scope","        Param a = 5","        Param b = 7","        Enter block {","            Binary operation: PLUS","              Left operand: 5","              Right operand: 7","            Result: 12","          Return 12","        Exit block }","        Exit function, returning: 12","    let result = 12","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","      Calling function: fibonacci()","        Evaluating arguments:","          Arg 0: 5","        Enter function scope","        Param n = 5","        Enter block {","            Binary operation: LESS_EQUAL","              Left operand: 5","              Right operand: 1","            Result: false","          If condition evaluated to: false","          Taking else branch","          Enter block {","              Calling function: fibonacci()","                Evaluating arguments:","                  Binary operation: MINUS","                    Left operand: 5","                    Right operand: 1","                  Result: 4","                  Arg 0: 4","                Enter function scope","                Param n = 4","                Enter block {","                    Binary operation: LESS_EQUAL","                      Left operand: 4","                      Right operand: 1","                    Result: false","                  If condition evaluated to: false","                  Taking else branch","                  Enter block {","                      Calling function: fibonacci()","                        Evaluating arguments:","                          Binary operation: MINUS","                            Left operand: 4","                            Right operand: 1","                          Result: 3","                          Arg 0: 3","                        Enter function scope","                        Param n = 3","                        Enter block {","                            Binary operation: LESS_EQUAL","                              Left operand: 3","                              Right operand: 1","                            Result: false","                          If condition evaluated to: false","                          Taking else branch","                          Enter block {","                              Calling function: fibonacci()","                                Evaluating arguments:","                                  Binary operation: MINUS","                                    Left operand: 3","                                    Right operand: 1","                                  Result: 2","                                  Arg 0: 2","                                Enter function scope","                                Param n = 2","                                Enter block {","                                    Binary operation: LESS_EQUAL","                                      Left operand: 2","                                      Right operand: 1","                                    Result: false","                                  If condition evaluated to: false","                                  Taking else branch","                                  Enter block {","                                      Calling function: fibonacci()","                                        Evaluating arguments:","                                          Binary operation: MINUS","                                            Left operand: 2","                                            Right operand: 1","                                          Result: 1","                                          Arg 0: 1","                                        Enter function scope","                                        Param n = 1","                                        Enter block {","                                            Binary operation: LESS_EQUAL","                                              Left operand: 1","                                              Right operand: 1","                                            Result: true","                                          If condition evaluated to: true","                                          Taking if branch","                                          Enter block {","                                            Return 1","                                          Exit block }","                                        Exit block }","                                        Exit function, returning: 1","                                    let left = 1","                                      Calling function: fibonacci()","                                        Evaluating arguments:","                                          Binary operation: MINUS","                                            Left operand: 2","                                            Right operand: 2","                                          Result: 0","                                          Arg 0: 0","                                        Enter function scope","                                        Param n = 0","                                        Enter block {","                                            Binary operation: LESS_EQUAL","                                              Left operand: 0","                                              Right operand: 1","                                            Result: true","                                          If condition evaluated to: true","                                          Taking if branch","                                          Enter block {","                                            Return 0","                                          Exit block }","                                        Exit block }","                                        Exit function, returning: 0","                                    let right = 0","                                      Binary operation: PLUS","                                        Left operand: 1","                                        Right operand: 0","                                      Result: 1","                                    Return 1","                                  Exit block }","                                Exit block }","                                Exit function, returning: 1","                            let left = 1","                              Calling function: fibonacci()","                                Evaluating arguments:","                                  Binary operation: MINUS","                                    Left operand: 3","                                    Right operand: 2","                                  Result: 1","                                  Arg 0: 1","                                Enter function scope","                                Param n = 1","                                Enter block {","                                    Binary operation: LESS_EQUAL","                                      Left operand: 1","                                      Right operand: 1","                                    Result: true","                                  If condition evaluated to: true","                                  Taking if branch","                                  Enter block {","                                    Return 1","                                  Exit block }","                                Exit block }","                                Exit function, returning: 1","                            let right = 1","                              Binary operation: PLUS","                                Left operand: 1","                                Right operand: 1","                              Result: 2","                            Return 2","                          Exit block }","                        Exit block }","                        Exit function, returning: 2","                    let left = 2","                      Calling function: fibonacci()","                        Evaluating arguments:","                          Binary operation: MINUS","                            Left operand: 4","                            Right operand: 2","                          Result: 2","                          Arg 0: 2","                        Enter function scope","                        Param n = 2","                        Enter block {","                            Binary operation: LESS_EQUAL","                              Left operand: 2","                              Right operand: 1","                            Result: false","                          If condition evaluated to: false","                          Taking else branch","                          Enter block {","                              Calling function: fibonacci()","                                Evaluating arguments:","                                  Binary operation: MINUS","                                    Left operand: 2","                                    Right operand: 1","                                  Result: 1","                                  Arg 0: 1","                                Enter function scope","                                Param n = 1","                                Enter block {","                                    Binary operation: LESS_EQUAL","                                      Left operand: 1","                                      Right operand: 1","                                    Result: true","                                  If condition evaluated to: true","                                  Taking if branch","                                  Enter block {","                                    Return 1","                                  Exit block }","                                Exit block }","                                Exit function, returning: 1","                            let left = 1","                              Calling function: fibonacci()","                                Evaluating arguments:","                                  Binary operation: MINUS","                                    Left operand: 2","                                    Right operand: 2","                                  Result: 0","                                  Arg 0: 0","                                Enter function scope","                                Param n = 0","                                Enter block {","                                    Binary operation: LESS_EQUAL","                                      Left operand: 0","                                      Right operand: 1","                                    Result: true","                                  If condition evaluated to: true","                                  Taking if branch","                                  Enter block {","                                    Return 0","                                  Exit block }","                                Exit block }","                                Exit function, returning: 0","                            let right = 0","                              Binary operation: PLUS","                                Left operand: 1","                                Right operand: 0","                              Result: 1","                            Return 1","                          Exit block }","                        Exit block }","                        Exit function, returning: 1","                    let right = 1","                      Binary operation: PLUS","                        Left operand: 2","                        Right operand: 1","                      Result: 3","                    Return 3","                  Exit block }","                Exit block }","                Exit function, returning: 3","            let left = 3","              Calling function: fibonacci()","                Evaluating arguments:","                  Binary operation: MINUS","                    Left operand: 5","                    Right operand: 2","                  Result: 3","                  Arg 0: 3","                Enter function scope","                Param n = 3","                Enter block {","                    Binary operation: LESS_EQUAL","                      Left operand: 3","                      Right operand: 1","                    Result: false","                  If condition evaluated to: false","                  Taking else branch","                  Enter block {","                      Calling function: fibonacci()","                        Evaluating arguments:","                          Binary operation: MINUS","                            Left operand: 3","                            Right operand: 1","                          Result: 2","                          Arg 0: 2","                        Enter function scope","                        Param n = 2","                        Enter block {","                            Binary operation: LESS_EQUAL","                              Left operand: 2","                              Right operand: 1","                            Result: false","                          If condition evaluated to: false","                          Taking else branch","                          Enter block {","                              Calling function: fibonacci()","                                Evaluating arguments:","                                  Binary operation: MINUS","                                    Left operand: 2","                                    Right operand: 1","                                  Result: 1","                                  Arg 0: 1","                                Enter function scope","                                Param n = 1","                                Enter block {","                                    Binary operation: LESS_EQUAL","                                      Left operand: 1","                                      Right operand: 1","                                    Result: true","                                  If condition evaluated to: true","                                  Taking if branch","                                  Enter block {","                                    Return 1","                                  Exit block }","                                Exit block }","                                Exit function, returning: 1","                            let left = 1","                              Calling function: fibonacci()","                                Evaluating arguments:","                                  Binary operation: MINUS","                                    Left operand: 2","                                    Right operand: 2","                                  Result: 0","                                  Arg 0: 0","                                Enter function scope","                                Param n = 0","                                Enter block {","                                    Binary operation: LESS_EQUAL","                                      Left operand: 0","                                      Right operand: 1","                                    Result: true","                                  If condition evaluated to: true","                                  Taking if branch","                                  Enter block {","                                    Return 0","                                  Exit block }","                                Exit block }","                                Exit function, returning: 0","                            let right = 0","                              Binary operation: PLUS","                                Left operand: 1","                                Right operand: 0","                              Result: 1","                            Return 1","                          Exit block }","                        Exit block }","                        Exit function, returning: 1","                    let left = 1","                      Calling function: fibonacci()","                        Evaluating arguments:","                          Binary operation: MINUS","                            Left operand: 3","                            Right operand: 2","                          Result: 1","                          Arg 0: 1","                        Enter function scope","                        Param n = 1","                        Enter block {","                            Binary operation: LESS_EQUAL","                              Left operand: 1","                              Right operand: 1","                            Result: true","                          If condition evaluated to: true","                          Taking if branch","                          Enter block {","                            Return 1","                          Exit block }","                        Exit block }","                        Exit function, returning: 1","                    let right = 1","                      Binary operation: PLUS","                        Left operand: 1","                        Right operand: 1","                      Result: 2","                    Return 2","                  Exit block }","                Exit block }","                Exit function, returning: 2","            let right = 2","              Binary operation: PLUS","                Left operand: 3","                Right operand: 2","              Result: 5","            Return 5","          Exit block }","        Exit block }","        Exit function, returning: 5","    let fib5 = 5","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    let numbers = [1,2,3,4,5]","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Push 6 to list","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Push 7 to list","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","      Calling function: len()","    let numLength = 7","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","        Binary operation: MINUS","          Left operand: 7","          Right operand: 1","        Result: 6","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    let colors = [\"red\",\"green\",\"blue\"]","    Enter block {","      Executing expression statement","        Calling function: print()","      Executing expression statement","        Calling function: print()","    Exit block }","    Enter block {","      Executing expression statement","        Calling function: print()","      Executing expression statement","        Calling function: print()","    Exit block }","    Enter block {","      Executing expression statement","        Calling function: print()","      Executing expression statement","        Calling function: print()","    Exit block }","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Enter block {","      Executing expression statement","        Calling function: print()","      Executing expression statement","        Calling function: print()","    Exit block }","    Enter block {","      Executing expression statement","        Calling function: print()","      Executing expression statement","        Calling function: print()","    Exit block }","    Enter block {","      Executing expression statement","        Calling function: print()","      Executing expression statement","        Calling function: print()","    Exit block }","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    let counter = 0","    Binary operation: LESS_THAN","      Left operand: 0","      Right operand: 3","    Result: true","    Enter block {","      Executing expression statement","        Calling function: print()","      Executing expression statement","        Calling function: print()","      Binary operation: PLUS","        Left operand: 0","        Right operand: 1","      Result: 1","    Exit block }","    Binary operation: LESS_THAN","      Left operand: 1","      Right operand: 3","    Result: true","    Enter block {","      Executing expression statement","        Calling function: print()","      Executing expression statement","        Calling function: print()","      Binary operation: PLUS","        Left operand: 1","        Right operand: 1","      Result: 2","    Exit block }","    Binary operation: LESS_THAN","      Left operand: 2","      Right operand: 3","    Result: true","    Enter block {","      Executing expression statement","        Calling function: print()","      Executing expression statement","        Calling function: print()","      Binary operation: PLUS","        Left operand: 2","        Right operand: 1","      Result: 3","    Exit block }","    Binary operation: LESS_THAN","      Left operand: 3","      Right operand: 3","    Result: false","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    let matrix = [1,2,3,4,5]","    Enter block {","        Binary operation: GREATER_THAN","          Left operand: 1","          Right operand: 2","        Result: false","      If condition evaluated to: false","      No else branch, skipping","    Exit block }","    Enter block {","        Binary operation: GREATER_THAN","          Left operand: 2","          Right operand: 2","        Result: false","      If condition evaluated to: false","      No else branch, skipping","    Exit block }","    Enter block {","        Binary operation: GREATER_THAN","          Left operand: 3","          Right operand: 2","        Result: true","      If condition evaluated to: true","      Taking if branch","      Enter block {","        Executing expression statement","          Calling function: print()","        Executing expression statement","          Calling function: print()","      Exit block }","    Exit block }","    Enter block {","        Binary operation: GREATER_THAN","          Left operand: 4","          Right operand: 2","        Result: true","      If condition evaluated to: true","      Taking if branch","      Enter block {","        Executing expression statement","          Calling function: print()","        Executing expression statement","          Calling function: print()","      Exit block }","    Exit block }","    Enter block {","        Binary operation: GREATER_THAN","          Left operand: 5","          Right operand: 2","        Result: true","      If condition evaluated to: true","      Taking if branch","      Enter block {","        Executing expression statement","          Calling function: print()","        Executing expression statement","          Calling function: print()","      Exit block }","    Exit block }","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    let arr = [10,20,30]","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","        Calling function: len()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","        Calling function: type()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","        Calling function: type()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","        Calling function: type()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","        Calling function: stringify()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","        Calling function: toNumber()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","      Binary operation: MINUS","        Binary operation: MULTIPLY","          Binary operation: PLUS","            Left operand: 10","            Right operand: 5","          Result: 15","          Left operand: 15","          Right operand: 2","        Result: 30","        Left operand: 30","        Binary operation: DIVIDE","          Left operand: 8","          Right operand: 4","        Result: 2","        Right operand: 2","      Result: 28","    let complex = 28","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","    If condition evaluated to: true","    Taking if branch","    Enter block {","      let blockVar = 100","      Executing expression statement","        Calling function: print()","      Executing expression statement","        Calling function: print()","        Binary operation: PLUS","          Left operand: 100","          Right operand: 50","        Result: 150","      let another = 150","      Executing expression statement","        Calling function: print()","      Executing expression statement","        Calling function: print()","    Exit block }","    Executing expression statement","      Calling function: print()","    Executing expression statement","      Calling function: print()","  Exit block }","","=== EXECUTION END ==="]